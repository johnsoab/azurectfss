- name: Azure CTF Infrastructure playbook
  hosts: localhost
  vars:
    rgname: "CTFRG"
    region: "eastus"
    serveruser: "ctfadmin"
    ssh_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDCSqoeGdEP4O97vnC0kCXZTfDZEgILeuMQytlDVBFP8Rv2KesteSplchcN0Yp+FntwrIrvgORCNWEflFht60398hBrlxjhH45tdFe/4QgWK1y1rn4hJ32KFUZwFbpV/IF5VVmXMODmPxDQstRqScDyWS5ZXJEjXqdDnzXvzbQlPlL0AxR3sgEmTUJdNHH0LEdn9qmibouJ2kpXDDyXojmND71y1RTkCx77hXKTouHGkhotxBICFr3lHxgv/My/0zfeVZ8QTqMbi7zM7yjILVfg7vOZLQr2MeTpchN4227yMY9ZukJxw37k0fQTKKxm8woRRnbdImSex+vWj6l8O8P/ ctfadmin@desktop"
    servernsg: "ctf-server-nsg"
    serversubnet: "ctf-server-subnet"
    servernic: "ctf-server-nic"
    serverdnslabel: "ctfsrv10101"
    workstationuser: "ctfuser"
    workstationnsg: "ctf-workstation-nsg"
    workstationsubnet: "ctf-wrk-subnet"
    workstationnic: "ctf-wrk-nic"
    workstationdnslabel: "ctfwrk10101"
    vnetname: "CTF-VNET1"
  vars_files:
    - secrets.yml
      # We fetch remoteallowedip and workstationpass from here

  tasks:
    - name: Create ResourceGroup
      azure_rm_resourcegroup:
        name: "{{ rgname }}"
        location: "{{ region }}"
        state: present

    - name: Create virtualnetwork
      azure_rm_virtualnetwork:
        resource_group: "{{ rgname }}"
        name: "{{ vnetname }}"
        address_prefixes_cidr:
          - "10.0.0.0/16"

    - name: Create Server Subnet
      azure_rm_subnet:
        resource_group: "{{ rgname }}"
        name: "{{ serversubnet }}"
        address_prefix_cidr: 10.0.0.0/24
        virtual_network_name: "{{ vnetname }}"

    - name: Create Workstation Subnet
      azure_rm_subnet:
        resource_group: "{{ rgname }}"
        name: "{{ workstationsubnet }}"
        address_prefix_cidr: 10.0.2.0/23
        virtual_network_name: "{{ vnetname }}"

    - name: Create server nsg
      azure_rm_securitygroup:
        resource_group: "{{ rgname }}"
        name: "{{ servernsg }}"
        purge_rules: true
        rules:
          - name: "AllowSSH_RemoteAdminIP"
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 100
            direction: Inbound
            source_address_prefix: "{{ remoteallowedip }}"
          - name: "AllowSSH_Workstation_Subnet"
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 105
            direction: Inbound
            source_address_prefix: "10.0.2.0/23"
          - name: "AllowHTTPS_Workstation_Subnet"
            protocol: Tcp
            destination_port_range: 443
            access: Allow
            priority: 110
            direction: Inbound
            source_address_prefix: "10.0.2.0/23"
          - name: "AllowHTTP_Workstation_Subnet"
            protocol: Tcp
            destination_port_range: 80
            access: Allow
            priority: 120
            direction: Inbound
            source_address_prefix: "10.0.2.0/23"
          - name: "DenyALL_Inbound"
            access: Deny
            protocol: "*"
            direction: Inbound
            destination_port_range: "*"
            source_address_prefix: "*"
            priority: 1000

    - name: Create workstation nsg
      azure_rm_securitygroup:
        resource_group: "{{ rgname }}"
        name: "{{ workstationnsg }}"
        purge_rules: true
        rules:
          - name: "AllowRDP_Workstation_Setup"
            protocol: Tcp
            destination_port_range: 3389
            access: Allow
            priority: 100
            direction: Inbound
            source_address_prefix: "{{ remoteallowedip }}"
            # This bit is only needed for Ansible setup of base images. Consider removing post-setup? Hrmm.
          - name: "AllowWinRM_Workstation_Setup"
            protocol: Tcp
            destination_port_range: 5986
            access: Allow
            priority: 110
            direction: Inbound
            source_address_prefix: "{{ remoteallowedip }}"

    - name: create server Public IP
      azure_rm_publicipaddress:
        resource_group: "{{ rgname }}"
        name: ctfserverpip
        domain_name_label: "{{ serverdnslabel }}"

    - name: Create server NIC
      azure_rm_networkinterface:
        resource_group: "{{ rgname }}"
        name: "{{ servernic }}"
        public_ip_address_name: ctfserverpip
        virtual_network_name: "{{ vnetname }}"
        subnet_name: "{{ serversubnet }}"
        security_group_name: "{{ servernsg }}"

    - name: Create serverVM
      azure_rm_virtualmachine:
        resource_group: "{{ rgname }}"
        name: ctfserver
        vm_size: Standard_D2_v3
        managed_disk_type: Standard_LRS
        admin_username: ctfadmin
        ssh_password_enabled: false
        ssh_public_keys: 
          - path: /home/ctfadmin/.ssh/authorized_keys
            key_data: "{{ ssh_key }}"
        network_interface_names: "{{ servernic }}"
        image:
          offer: CentOS
          publisher: OpenLogic
          sku: '7.4'
          version: latest

    # We could literally iterate this for the number of workstations we need
    # If I can work out the automation on windows.
    - name: create workstation Public IP
      azure_rm_publicipaddress:
        resource_group: "{{ rgname }}"
        name: workstationpip
        domain_name_label: "{{ workstationdnslabel }}"

    - name: Create base workstation NIC
      azure_rm_networkinterface:
        resource_group: "{{ rgname }}"
        name: "{{ workstationnic }}"
        public_ip_address_name: workstationpip
        virtual_network_name: "{{ vnetname }}"
        subnet_name: "{{ workstationsubnet }}"
        security_group_name: "{{ workstationnsg }}"

    - name: Create workstation base image
      azure_rm_virtualmachine:
        resource_group: "{{ rgname }}"
        name: ctfwrkbase
        vm_size: Standard_D2_v3
        managed_disk_type: Standard_LRS
        admin_username: "{{ workstationuser }}"
        admin_password: "{{ workstationpass }}"
        network_interface_names: "{{ workstationnic }}"
        os_type: Windows
        image:
          offer: Windows-10
          publisher: MicrosoftWindowsDesktop
          sku: RS3-Pro
          version: latest

        
